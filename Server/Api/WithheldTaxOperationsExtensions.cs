// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace TaxumoChatBot.Api
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for WithheldTaxOperations.
    /// </summary>
    public static partial class WithheldTaxOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='companyId'>
            /// </param>
            /// <param name='quarter'>
            /// </param>
            public static IList<WithheldTax> GetByCompany(this IWithheldTaxOperations operations, int year, int companyId, int? quarter = default(int?))
            {
                return operations.GetByCompanyAsync(year, companyId, quarter).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='companyId'>
            /// </param>
            /// <param name='quarter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<WithheldTax>> GetByCompanyAsync(this IWithheldTaxOperations operations, int year, int companyId, int? quarter = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByCompanyWithHttpMessagesAsync(year, companyId, quarter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='companyId'>
            /// </param>
            /// <param name='quarter'>
            /// </param>
            public static IList<WithheldTax> GetByCompany1(this IWithheldTaxOperations operations, int year, int companyId, int quarter)
            {
                return operations.GetByCompany1Async(year, companyId, quarter).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='companyId'>
            /// </param>
            /// <param name='quarter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<WithheldTax>> GetByCompany1Async(this IWithheldTaxOperations operations, int year, int companyId, int quarter, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByCompany1WithHttpMessagesAsync(year, companyId, quarter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='entity'>
            /// </param>
            public static object Post(this IWithheldTaxOperations operations, WithheldTax entity)
            {
                return operations.PostAsync(entity).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='entity'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostAsync(this IWithheldTaxOperations operations, WithheldTax entity, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(entity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='entity'>
            /// </param>
            public static object Put(this IWithheldTaxOperations operations, int id, WithheldTax entity)
            {
                return operations.PutAsync(id, entity).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='entity'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutAsync(this IWithheldTaxOperations operations, int id, WithheldTax entity, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutWithHttpMessagesAsync(id, entity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object Delete(this IWithheldTaxOperations operations, int id)
            {
                return operations.DeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAsync(this IWithheldTaxOperations operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

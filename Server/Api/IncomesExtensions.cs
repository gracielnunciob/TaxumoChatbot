// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace TaxumoChatBot.Api
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Incomes.
    /// </summary>
    public static partial class IncomesExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='company'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='month'>
            /// </param>
            /// <param name='quarter'>
            /// </param>
            public static IList<Income> GetIncomes(this IIncomes operations, int company, int year, int? month = default(int?), int? quarter = default(int?))
            {
                return operations.GetIncomesAsync(company, year, month, quarter).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='company'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='month'>
            /// </param>
            /// <param name='quarter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Income>> GetIncomesAsync(this IIncomes operations, int company, int year, int? month = default(int?), int? quarter = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIncomesWithHttpMessagesAsync(company, year, month, quarter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='company'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='quarter'>
            /// </param>
            /// <param name='month'>
            /// </param>
            public static IList<Income> GetIncomes1(this IIncomes operations, int company, int year, int quarter, int? month = default(int?))
            {
                return operations.GetIncomes1Async(company, year, quarter, month).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='company'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='quarter'>
            /// </param>
            /// <param name='month'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Income>> GetIncomes1Async(this IIncomes operations, int company, int year, int quarter, int? month = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIncomes1WithHttpMessagesAsync(company, year, quarter, month, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='company'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='month'>
            /// </param>
            /// <param name='quarter'>
            /// </param>
            public static IList<Income> GetIncomes2(this IIncomes operations, int company, int year, int month, int? quarter = default(int?))
            {
                return operations.GetIncomes2Async(company, year, month, quarter).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='company'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='month'>
            /// </param>
            /// <param name='quarter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Income>> GetIncomes2Async(this IIncomes operations, int company, int year, int month, int? quarter = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetIncomes2WithHttpMessagesAsync(company, year, month, quarter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='income'>
            /// </param>
            public static Income PostIncome(this IIncomes operations, Income income)
            {
                return operations.PostIncomeAsync(income).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='income'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Income> PostIncomeAsync(this IIncomes operations, Income income, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostIncomeWithHttpMessagesAsync(income, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='income'>
            /// </param>
            public static Income PutIncome(this IIncomes operations, int id, Income income)
            {
                return operations.PutIncomeAsync(id, income).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='income'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Income> PutIncomeAsync(this IIncomes operations, int id, Income income, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutIncomeWithHttpMessagesAsync(id, income, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Income DeleteIncome(this IIncomes operations, int id)
            {
                return operations.DeleteIncomeAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Income> DeleteIncomeAsync(this IIncomes operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteIncomeWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='income'>
            /// </param>
            public static bool? BulkPostIncome(this IIncomes operations, IList<Income> income)
            {
                return operations.BulkPostIncomeAsync(income).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='income'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> BulkPostIncomeAsync(this IIncomes operations, IList<Income> income, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BulkPostIncomeWithHttpMessagesAsync(income, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

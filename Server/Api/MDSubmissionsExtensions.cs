// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace TaxumoChatBot.Api
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for MDSubmissions.
    /// </summary>
    public static partial class MDSubmissionsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='company'>
            /// </param>
            public static object GetMDSubmissions(this IMDSubmissions operations, int company)
            {
                return operations.GetMDSubmissionsAsync(company).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='company'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetMDSubmissionsAsync(this IMDSubmissions operations, int company, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetMDSubmissionsWithHttpMessagesAsync(company, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object UpdateStatus(this IMDSubmissions operations, Submission model)
            {
                return operations.UpdateStatusAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> UpdateStatusAsync(this IMDSubmissions operations, Submission model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateStatusWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object PostAmendment(this IMDSubmissions operations, Submission model)
            {
                return operations.PostAmendmentAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostAmendmentAsync(this IMDSubmissions operations, Submission model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostAmendmentWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object CancelAmendment(this IMDSubmissions operations, int id)
            {
                return operations.CancelAmendmentAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CancelAmendmentAsync(this IMDSubmissions operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelAmendmentWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object SetExpense(this IMDSubmissions operations, ExpenseReceipt model)
            {
                return operations.SetExpenseAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetExpenseAsync(this IMDSubmissions operations, ExpenseReceipt model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetExpenseWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object SetIncome(this IMDSubmissions operations, IncomeReceipt model)
            {
                return operations.SetIncomeAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SetIncomeAsync(this IMDSubmissions operations, IncomeReceipt model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SetIncomeWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='submissions'>
            /// </param>
            public static object CreateMDSubmission(this IMDSubmissions operations, IList<MDSubmission> submissions)
            {
                return operations.CreateMDSubmissionAsync(submissions).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='submissions'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> CreateMDSubmissionAsync(this IMDSubmissions operations, IList<MDSubmission> submissions, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateMDSubmissionWithHttpMessagesAsync(submissions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace TaxumoChatBot.Api
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for WithheldTaxExpandedOperations.
    /// </summary>
    public static partial class WithheldTaxExpandedOperationsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            public static IList<ExpandedTaxCode> GetExpandedCodes(this IWithheldTaxExpandedOperations operations)
            {
                return operations.GetExpandedCodesAsync().GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<ExpandedTaxCode>> GetExpandedCodesAsync(this IWithheldTaxExpandedOperations operations, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExpandedCodesWithHttpMessagesAsync(null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companyId'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='quarter'>
            /// </param>
            /// <param name='month'>
            /// </param>
            public static IList<WithheldTaxExpanded> Get(this IWithheldTaxExpandedOperations operations, int companyId, int? year = default(int?), int? quarter = default(int?), int? month = default(int?))
            {
                return operations.GetAsync(companyId, year, quarter, month).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='companyId'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='quarter'>
            /// </param>
            /// <param name='month'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<WithheldTaxExpanded>> GetAsync(this IWithheldTaxExpandedOperations operations, int companyId, int? year = default(int?), int? quarter = default(int?), int? month = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetWithHttpMessagesAsync(companyId, year, quarter, month, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='entity'>
            /// </param>
            public static object Post(this IWithheldTaxExpandedOperations operations, Expanded entity)
            {
                return operations.PostAsync(entity).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='entity'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostAsync(this IWithheldTaxExpandedOperations operations, Expanded entity, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostWithHttpMessagesAsync(entity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='entity'>
            /// </param>
            public static object PostVat(this IWithheldTaxExpandedOperations operations, ExpandedVat entity)
            {
                return operations.PostVatAsync(entity).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='entity'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PostVatAsync(this IWithheldTaxExpandedOperations operations, ExpandedVat entity, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostVatWithHttpMessagesAsync(entity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='entity'>
            /// </param>
            public static object Put(this IWithheldTaxExpandedOperations operations, int id, WithheldTaxExpanded entity)
            {
                return operations.PutAsync(id, entity).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='entity'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PutAsync(this IWithheldTaxExpandedOperations operations, int id, WithheldTaxExpanded entity, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutWithHttpMessagesAsync(id, entity, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object Delete(this IWithheldTaxExpandedOperations operations, int id)
            {
                return operations.DeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAsync(this IWithheldTaxExpandedOperations operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

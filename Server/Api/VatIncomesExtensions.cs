// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace TaxumoChatBot.Api
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for VatIncomes.
    /// </summary>
    public static partial class VatIncomesExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='company'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='month'>
            /// </param>
            /// <param name='quarter'>
            /// </param>
            public static IList<VatIncome> GetVatIncomes(this IVatIncomes operations, int company, int year, int? month = default(int?), int? quarter = default(int?))
            {
                return operations.GetVatIncomesAsync(company, year, month, quarter).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='company'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='month'>
            /// </param>
            /// <param name='quarter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<VatIncome>> GetVatIncomesAsync(this IVatIncomes operations, int company, int year, int? month = default(int?), int? quarter = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVatIncomesWithHttpMessagesAsync(company, year, month, quarter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='company'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='quarter'>
            /// </param>
            /// <param name='month'>
            /// </param>
            public static IList<VatIncome> GetVatIncomes1(this IVatIncomes operations, int company, int year, int quarter, int? month = default(int?))
            {
                return operations.GetVatIncomes1Async(company, year, quarter, month).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='company'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='quarter'>
            /// </param>
            /// <param name='month'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<VatIncome>> GetVatIncomes1Async(this IVatIncomes operations, int company, int year, int quarter, int? month = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVatIncomes1WithHttpMessagesAsync(company, year, quarter, month, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='company'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='month'>
            /// </param>
            /// <param name='quarter'>
            /// </param>
            public static IList<VatIncome> GetVatIncomes2(this IVatIncomes operations, int company, int year, int month, int? quarter = default(int?))
            {
                return operations.GetVatIncomes2Async(company, year, month, quarter).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='company'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='month'>
            /// </param>
            /// <param name='quarter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<VatIncome>> GetVatIncomes2Async(this IVatIncomes operations, int company, int year, int month, int? quarter = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetVatIncomes2WithHttpMessagesAsync(company, year, month, quarter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='income'>
            /// </param>
            public static VatIncome PostVatIncome(this IVatIncomes operations, VatIncome income)
            {
                return operations.PostVatIncomeAsync(income).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='income'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VatIncome> PostVatIncomeAsync(this IVatIncomes operations, VatIncome income, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostVatIncomeWithHttpMessagesAsync(income, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='income'>
            /// </param>
            public static VatIncome PutIncome(this IVatIncomes operations, int id, VatIncome income)
            {
                return operations.PutIncomeAsync(id, income).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='income'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VatIncome> PutIncomeAsync(this IVatIncomes operations, int id, VatIncome income, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutIncomeWithHttpMessagesAsync(id, income, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static VatIncome DeleteIncome(this IVatIncomes operations, int id)
            {
                return operations.DeleteIncomeAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<VatIncome> DeleteIncomeAsync(this IVatIncomes operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteIncomeWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='income'>
            /// </param>
            public static bool? BulkPostIncome(this IVatIncomes operations, IList<VatIncome> income)
            {
                return operations.BulkPostIncomeAsync(income).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='income'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> BulkPostIncomeAsync(this IVatIncomes operations, IList<VatIncome> income, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BulkPostIncomeWithHttpMessagesAsync(income, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace TaxumoChatBot.Api
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Documents.
    /// </summary>
    public static partial class DocumentsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            public static IList<MDDocument> GetDocuments(this IDocuments operations, string userId)
            {
                return operations.GetDocumentsAsync(userId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<MDDocument>> GetDocumentsAsync(this IDocuments operations, string userId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDocumentsWithHttpMessagesAsync(userId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static MDDocumentModel UpdateDocument(this IDocuments operations, MDDocumentModel model)
            {
                return operations.UpdateDocumentAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MDDocumentModel> UpdateDocumentAsync(this IDocuments operations, MDDocumentModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateDocumentWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static MDDocumentModel UploadDocument(this IDocuments operations, MDDocumentModel model)
            {
                return operations.UploadDocumentAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MDDocumentModel> UploadDocumentAsync(this IDocuments operations, MDDocumentModel model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UploadDocumentWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            public static bool? CreateDocuments(this IDocuments operations, string user)
            {
                return operations.CreateDocumentsAsync(user).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='user'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> CreateDocumentsAsync(this IDocuments operations, string user, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CreateDocumentsWithHttpMessagesAsync(user, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            public static MDRequirement UpdateRequirement(this IDocuments operations, MDRequirement model)
            {
                return operations.UpdateRequirementAsync(model).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<MDRequirement> UpdateRequirementAsync(this IDocuments operations, MDRequirement model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.UpdateRequirementWithHttpMessagesAsync(model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

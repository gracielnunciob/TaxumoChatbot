// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace TaxumoChatBot.Api
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Expenses.
    /// </summary>
    public static partial class ExpensesExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='company'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='month'>
            /// </param>
            /// <param name='quarter'>
            /// </param>
            public static IList<Expense> GetExpenses(this IExpenses operations, int company, int year, int? month = default(int?), int? quarter = default(int?))
            {
                return operations.GetExpensesAsync(company, year, month, quarter).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='company'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='month'>
            /// </param>
            /// <param name='quarter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Expense>> GetExpensesAsync(this IExpenses operations, int company, int year, int? month = default(int?), int? quarter = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExpensesWithHttpMessagesAsync(company, year, month, quarter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='company'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='quarter'>
            /// </param>
            /// <param name='month'>
            /// </param>
            public static IList<Expense> GetExpenses1(this IExpenses operations, int company, int year, int quarter, int? month = default(int?))
            {
                return operations.GetExpenses1Async(company, year, quarter, month).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='company'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='quarter'>
            /// </param>
            /// <param name='month'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Expense>> GetExpenses1Async(this IExpenses operations, int company, int year, int quarter, int? month = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExpenses1WithHttpMessagesAsync(company, year, quarter, month, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='company'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='month'>
            /// </param>
            /// <param name='quarter'>
            /// </param>
            public static IList<Expense> GetExpenses2(this IExpenses operations, int company, int year, int month, int? quarter = default(int?))
            {
                return operations.GetExpenses2Async(company, year, month, quarter).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='company'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='month'>
            /// </param>
            /// <param name='quarter'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<Expense>> GetExpenses2Async(this IExpenses operations, int company, int year, int month, int? quarter = default(int?), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetExpenses2WithHttpMessagesAsync(company, year, month, quarter, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expense'>
            /// </param>
            public static Expense PostExpense(this IExpenses operations, Expense expense)
            {
                return operations.PostExpenseAsync(expense).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expense'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Expense> PostExpenseAsync(this IExpenses operations, Expense expense, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostExpenseWithHttpMessagesAsync(expense, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='expense'>
            /// </param>
            public static Expense PutExpense(this IExpenses operations, int id, Expense expense)
            {
                return operations.PutExpenseAsync(id, expense).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='expense'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Expense> PutExpenseAsync(this IExpenses operations, int id, Expense expense, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PutExpenseWithHttpMessagesAsync(id, expense, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static Expense DeleteExpense(this IExpenses operations, int id)
            {
                return operations.DeleteExpenseAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<Expense> DeleteExpenseAsync(this IExpenses operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteExpenseWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expense'>
            /// </param>
            public static bool? BulkPostExpense(this IExpenses operations, IList<Expense> expense)
            {
                return operations.BulkPostExpenseAsync(expense).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='expense'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> BulkPostExpenseAsync(this IExpenses operations, IList<Expense> expense, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.BulkPostExpenseWithHttpMessagesAsync(expense, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

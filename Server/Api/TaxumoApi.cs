// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace TaxumoChatBot.Api
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Models;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Net;
    using System.Net.Http;

    public partial class TaxumoApi : ServiceClient<TaxumoApi>, ITaxumoApi
    {
        /// <summary>
        /// The base URI of the service.
        /// </summary>
        public System.Uri BaseUri { get; set; }

        /// <summary>
        /// Gets or sets json serialization settings.
        /// </summary>
        public JsonSerializerSettings SerializationSettings { get; private set; }

        /// <summary>
        /// Gets or sets json deserialization settings.
        /// </summary>
        public JsonSerializerSettings DeserializationSettings { get; private set; }

        /// <summary>
        /// Gets the IAnnualIncomeTax.
        /// </summary>
        public virtual IAnnualIncomeTax AnnualIncomeTax { get; private set; }

        /// <summary>
        /// Gets the IAnnualRemittance.
        /// </summary>
        public virtual IAnnualRemittance AnnualRemittance { get; private set; }

        /// <summary>
        /// Gets the ICashflow.
        /// </summary>
        public virtual ICashflow Cashflow { get; private set; }

        /// <summary>
        /// Gets the ICategoryOperations.
        /// </summary>
        public virtual ICategoryOperations Category { get; private set; }

        /// <summary>
        /// Gets the ICompanies.
        /// </summary>
        public virtual ICompanies Companies { get; private set; }

        /// <summary>
        /// Gets the ICompanyUsers.
        /// </summary>
        public virtual ICompanyUsers CompanyUsers { get; private set; }

        /// <summary>
        /// Gets the IDisbursements.
        /// </summary>
        public virtual IDisbursements Disbursements { get; private set; }

        /// <summary>
        /// Gets the IDiscounts.
        /// </summary>
        public virtual IDiscounts Discounts { get; private set; }

        /// <summary>
        /// Gets the IDocuments.
        /// </summary>
        public virtual IDocuments Documents { get; private set; }

        /// <summary>
        /// Gets the IExpenses.
        /// </summary>
        public virtual IExpenses Expenses { get; private set; }

        /// <summary>
        /// Gets the IForm.
        /// </summary>
        public virtual IForm Form { get; private set; }

        /// <summary>
        /// Gets the IGeneralJournal.
        /// </summary>
        public virtual IGeneralJournal GeneralJournal { get; private set; }

        /// <summary>
        /// Gets the IGeneralLedger.
        /// </summary>
        public virtual IGeneralLedger GeneralLedger { get; private set; }

        /// <summary>
        /// Gets the IIncomes.
        /// </summary>
        public virtual IIncomes Incomes { get; private set; }

        /// <summary>
        /// Gets the IMDSubmissions.
        /// </summary>
        public virtual IMDSubmissions MDSubmissions { get; private set; }

        /// <summary>
        /// Gets the IMonthlyRemittance.
        /// </summary>
        public virtual IMonthlyRemittance MonthlyRemittance { get; private set; }

        /// <summary>
        /// Gets the IMonthlyVat.
        /// </summary>
        public virtual IMonthlyVat MonthlyVat { get; private set; }

        /// <summary>
        /// Gets the IMpt.
        /// </summary>
        public virtual IMpt Mpt { get; private set; }

        /// <summary>
        /// Gets the IOrders.
        /// </summary>
        public virtual IOrders Orders { get; private set; }

        /// <summary>
        /// Gets the IPaymentForm.
        /// </summary>
        public virtual IPaymentForm PaymentForm { get; private set; }

        /// <summary>
        /// Gets the IProducts.
        /// </summary>
        public virtual IProducts Products { get; private set; }

        /// <summary>
        /// Gets the IPurchaseJournal.
        /// </summary>
        public virtual IPurchaseJournal PurchaseJournal { get; private set; }

        /// <summary>
        /// Gets the IQit.
        /// </summary>
        public virtual IQit Qit { get; private set; }

        /// <summary>
        /// Gets the IQitGrad.
        /// </summary>
        public virtual IQitGrad QitGrad { get; private set; }

        /// <summary>
        /// Gets the IQitGrt.
        /// </summary>
        public virtual IQitGrt QitGrt { get; private set; }

        /// <summary>
        /// Gets the IQpt.
        /// </summary>
        public virtual IQpt Qpt { get; private set; }

        /// <summary>
        /// Gets the IQptGrt.
        /// </summary>
        public virtual IQptGrt QptGrt { get; private set; }

        /// <summary>
        /// Gets the IQuarterlyRemittance.
        /// </summary>
        public virtual IQuarterlyRemittance QuarterlyRemittance { get; private set; }

        /// <summary>
        /// Gets the IQuarterlyVat.
        /// </summary>
        public virtual IQuarterlyVat QuarterlyVat { get; private set; }

        /// <summary>
        /// Gets the IReceipts.
        /// </summary>
        public virtual IReceipts Receipts { get; private set; }

        /// <summary>
        /// Gets the ISalesJournal.
        /// </summary>
        public virtual ISalesJournal SalesJournal { get; private set; }

        /// <summary>
        /// Gets the ITaxCards.
        /// </summary>
        public virtual ITaxCards TaxCards { get; private set; }

        /// <summary>
        /// Gets the ITaxSubmissions.
        /// </summary>
        public virtual ITaxSubmissions TaxSubmissions { get; private set; }

        /// <summary>
        /// Gets the IUsers.
        /// </summary>
        public virtual IUsers Users { get; private set; }

        /// <summary>
        /// Gets the IVatExpenses.
        /// </summary>
        public virtual IVatExpenses VatExpenses { get; private set; }

        /// <summary>
        /// Gets the IVatIncomes.
        /// </summary>
        public virtual IVatIncomes VatIncomes { get; private set; }

        /// <summary>
        /// Gets the IWallet.
        /// </summary>
        public virtual IWallet Wallet { get; private set; }

        /// <summary>
        /// Gets the IWithheldTaxOperations.
        /// </summary>
        public virtual IWithheldTaxOperations WithheldTax { get; private set; }

        /// <summary>
        /// Gets the IWithheldTaxExpandedOperations.
        /// </summary>
        public virtual IWithheldTaxExpandedOperations WithheldTaxExpanded { get; private set; }

        /// <summary>
        /// Initializes a new instance of the TaxumoApi class.
        /// </summary>
        /// <param name='httpClient'>
        /// HttpClient to be used
        /// </param>
        /// <param name='disposeHttpClient'>
        /// True: will dispose the provided httpClient on calling TaxumoApi.Dispose(). False: will not dispose provided httpClient</param>
        public TaxumoApi(HttpClient httpClient, bool disposeHttpClient) : base(httpClient, disposeHttpClient)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the TaxumoApi class.
        /// </summary>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public TaxumoApi(params DelegatingHandler[] handlers) : base(handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the TaxumoApi class.
        /// </summary>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        public TaxumoApi(HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : base(rootHandler, handlers)
        {
            Initialize();
        }

        /// <summary>
        /// Initializes a new instance of the TaxumoApi class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public TaxumoApi(System.Uri baseUri, params DelegatingHandler[] handlers) : this(handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// Initializes a new instance of the TaxumoApi class.
        /// </summary>
        /// <param name='baseUri'>
        /// Optional. The base URI of the service.
        /// </param>
        /// <param name='rootHandler'>
        /// Optional. The http client handler used to handle http transport.
        /// </param>
        /// <param name='handlers'>
        /// Optional. The delegating handlers to add to the http client pipeline.
        /// </param>
        /// <exception cref="System.ArgumentNullException">
        /// Thrown when a required parameter is null
        /// </exception>
        public TaxumoApi(System.Uri baseUri, HttpClientHandler rootHandler, params DelegatingHandler[] handlers) : this(rootHandler, handlers)
        {
            if (baseUri == null)
            {
                throw new System.ArgumentNullException("baseUri");
            }
            BaseUri = baseUri;
        }

        /// <summary>
        /// An optional partial-method to perform custom initialization.
        ///</summary>
        partial void CustomInitialize();
        /// <summary>
        /// Initializes client properties.
        /// </summary>
        private void Initialize()
        {
            AnnualIncomeTax = new AnnualIncomeTax(this);
            AnnualRemittance = new AnnualRemittance(this);
            Cashflow = new Cashflow(this);
            Category = new CategoryOperations(this);
            Companies = new Companies(this);
            CompanyUsers = new CompanyUsers(this);
            Disbursements = new Disbursements(this);
            Discounts = new Discounts(this);
            Documents = new Documents(this);
            Expenses = new Expenses(this);
            Form = new Form(this);
            GeneralJournal = new GeneralJournal(this);
            GeneralLedger = new GeneralLedger(this);
            Incomes = new Incomes(this);
            MDSubmissions = new MDSubmissions(this);
            MonthlyRemittance = new MonthlyRemittance(this);
            MonthlyVat = new MonthlyVat(this);
            Mpt = new Mpt(this);
            Orders = new Orders(this);
            PaymentForm = new PaymentForm(this);
            Products = new Products(this);
            PurchaseJournal = new PurchaseJournal(this);
            Qit = new Qit(this);
            QitGrad = new QitGrad(this);
            QitGrt = new QitGrt(this);
            Qpt = new Qpt(this);
            QptGrt = new QptGrt(this);
            QuarterlyRemittance = new QuarterlyRemittance(this);
            QuarterlyVat = new QuarterlyVat(this);
            Receipts = new Receipts(this);
            SalesJournal = new SalesJournal(this);
            TaxCards = new TaxCards(this);
            TaxSubmissions = new TaxSubmissions(this);
            Users = new Users(this);
            VatExpenses = new VatExpenses(this);
            VatIncomes = new VatIncomes(this);
            Wallet = new Wallet(this);
            WithheldTax = new WithheldTaxOperations(this);
            WithheldTaxExpanded = new WithheldTaxExpandedOperations(this);
            BaseUri = new System.Uri("http://localhost:57433");
            SerializationSettings = new JsonSerializerSettings
            {
                Formatting = Newtonsoft.Json.Formatting.Indented,
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new  List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            DeserializationSettings = new JsonSerializerSettings
            {
                DateFormatHandling = Newtonsoft.Json.DateFormatHandling.IsoDateFormat,
                DateTimeZoneHandling = Newtonsoft.Json.DateTimeZoneHandling.Utc,
                NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore,
                ReferenceLoopHandling = Newtonsoft.Json.ReferenceLoopHandling.Serialize,
                ContractResolver = new ReadOnlyJsonContractResolver(),
                Converters = new List<JsonConverter>
                    {
                        new Iso8601TimeSpanConverter()
                    }
            };
            CustomInitialize();
        }
    }
}

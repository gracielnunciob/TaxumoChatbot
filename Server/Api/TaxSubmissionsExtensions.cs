// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace TaxumoChatBot.Api
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TaxSubmissions.
    /// </summary>
    public static partial class TaxSubmissionsExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='company'>
            /// </param>
            /// <param name='year'>
            /// </param>
            public static IList<TaxSubmission> GetByCompany(this ITaxSubmissions operations, int company, int year)
            {
                return operations.GetByCompanyAsync(company, year).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='company'>
            /// </param>
            /// <param name='year'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<TaxSubmission>> GetByCompanyAsync(this ITaxSubmissions operations, int company, int year, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByCompanyWithHttpMessagesAsync(company, year, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static TaxSubmission GetSubmission(this ITaxSubmissions operations, int id)
            {
                return operations.GetSubmissionAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TaxSubmission> GetSubmissionAsync(this ITaxSubmissions operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetSubmissionWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static TaxSubmission Cancel(this ITaxSubmissions operations, int id)
            {
                return operations.CancelAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TaxSubmission> CancelAsync(this ITaxSubmissions operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.CancelWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='paymentArgs'>
            /// </param>
            public static TaxSubmission Settle(this ITaxSubmissions operations, int id, PaymentArgs paymentArgs)
            {
                return operations.SettleAsync(id, paymentArgs).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='paymentArgs'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TaxSubmission> SettleAsync(this ITaxSubmissions operations, int id, PaymentArgs paymentArgs, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SettleWithHttpMessagesAsync(id, paymentArgs, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}

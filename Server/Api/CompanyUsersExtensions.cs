// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace TaxumoChatBot.Api
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for CompanyUsers.
    /// </summary>
    public static partial class CompanyUsersExtensions
    {
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static IList<CompanyUser> GetCompanyUsers(this ICompanyUsers operations, int id)
            {
                return operations.GetCompanyUsersAsync(id).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<IList<CompanyUser>> GetCompanyUsersAsync(this ICompanyUsers operations, int id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetCompanyUsersWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='companyId'>
            /// </param>
            public static CompanyUser PostCompanyUser(this ICompanyUsers operations, string email, int companyId)
            {
                return operations.PostCompanyUserAsync(email, companyId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='companyId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CompanyUser> PostCompanyUserAsync(this ICompanyUsers operations, string email, int companyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PostCompanyUserWithHttpMessagesAsync(email, companyId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='stub'>
            /// </param>
            public static void PutCompanyUser(this ICompanyUsers operations, CompanyStub stub)
            {
                operations.PutCompanyUserAsync(stub).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='stub'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task PutCompanyUserAsync(this ICompanyUsers operations, CompanyStub stub, CancellationToken cancellationToken = default(CancellationToken))
            {
                (await operations.PutCompanyUserWithHttpMessagesAsync(stub, null, cancellationToken).ConfigureAwait(false)).Dispose();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// </param>
            public static CompanyUser DeleteCompanyUser(this ICompanyUsers operations, System.Guid guid)
            {
                return operations.DeleteCompanyUserAsync(guid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='guid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<CompanyUser> DeleteCompanyUserAsync(this ICompanyUsers operations, System.Guid guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteCompanyUserWithHttpMessagesAsync(guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='guid'>
            /// </param>
            public static bool? VerifyGuid(this ICompanyUsers operations, string email, string userId, System.Guid guid)
            {
                return operations.VerifyGuidAsync(email, userId, guid).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='userId'>
            /// </param>
            /// <param name='guid'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> VerifyGuidAsync(this ICompanyUsers operations, string email, string userId, System.Guid guid, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.VerifyGuidWithHttpMessagesAsync(email, userId, guid, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='companyId'>
            /// </param>
            public static bool? ResendEmail(this ICompanyUsers operations, string email, int companyId)
            {
                return operations.ResendEmailAsync(email, companyId).GetAwaiter().GetResult();
            }

            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='email'>
            /// </param>
            /// <param name='companyId'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<bool?> ResendEmailAsync(this ICompanyUsers operations, string email, int companyId, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ResendEmailWithHttpMessagesAsync(email, companyId, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
